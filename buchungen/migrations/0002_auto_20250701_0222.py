# Generated by Django 5.2.3 on 2025-07-01 00:22

from django.db import migrations


class Migration(migrations.Migration):
    """
    Performance-Optimierung: Datenbankindizes für häufige Abfragen.

    Diese Migration fügt Indizes für die am häufigsten genutzten Spalten hinzu:
    - Buchungsdatum (für Zeitraum-Abfragen)
    - Erstellt-am (für Sortierung)
    - Konto-Nummern (für Filterung)
    - Status-Felder (für Filterung)
    """

    dependencies = [
        ("buchungen", "0001_initial"),
    ]

    operations = [
        # Index auf Buchungsdatum für Zeitraum-Abfragen
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS idx_buchungssatz_buchungsdatum ON buchungen_buchungssatz (buchungsdatum);",
            reverse_sql="DROP INDEX IF EXISTS idx_buchungssatz_buchungsdatum;",
        ),
        # Index auf erstellt_am für Sortierung
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS idx_buchungssatz_erstellt_am ON buchungen_buchungssatz (erstellt_am);",
            reverse_sql="DROP INDEX IF EXISTS idx_buchungssatz_erstellt_am;",
        ),
        # Zusammengesetzter Index für Datum + Soll-Konto (häufige Kombination)
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS idx_buchungssatz_datum_soll ON buchungen_buchungssatz (buchungsdatum, soll_konto_id);",
            reverse_sql="DROP INDEX IF EXISTS idx_buchungssatz_datum_soll;",
        ),
        # Zusammengesetzter Index für Datum + Haben-Konto (häufige Kombination)
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS idx_buchungssatz_datum_haben ON buchungen_buchungssatz (buchungsdatum, haben_konto_id);",
            reverse_sql="DROP INDEX IF EXISTS idx_buchungssatz_datum_haben;",
        ),
        # Index auf validiert-Status für Admin-Filterung
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS idx_buchungssatz_validiert ON buchungen_buchungssatz (validiert);",
            reverse_sql="DROP INDEX IF EXISTS idx_buchungssatz_validiert;",
        ),
        # Index auf Geschäftspartner für Filterung
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS idx_geschaeftspartner_aktiv ON buchungen_geschaeftspartner (aktiv);",
            reverse_sql="DROP INDEX IF EXISTS idx_geschaeftspartner_aktiv;",
        ),
        # Index auf Partner-Typ für Filterung
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS idx_geschaeftspartner_typ ON buchungen_geschaeftspartner (partner_typ);",
            reverse_sql="DROP INDEX IF EXISTS idx_geschaeftspartner_typ;",
        ),
    ]
